<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Keywords>
        <Keyword>mockset</Keyword>
      </Keywords>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>mockset</Title>
      <Author>Miles Lin</Author>
      <Description>mockset for DbContext</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>mockset</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>Train</ID>
          <ToolTip>Train</ToolTip>
          <Default>Train</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>Model</ID>
          <ToolTip>Model</ToolTip>
          <Default>Model</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>DbContext</ID>
          <ToolTip>DbContext</ToolTip>
          <Default>DbContext</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[var data = new List<$Model$>()
            {
                new $Model$(){ },
                new $Model$(){ }
            }.AsQueryable();

            var mockSet = Substitute.For<DbSet<$Model$>, IQueryable<$Model$>>();
            ((IQueryable<$Model$>)mockSet).Provider.Returns(data.Provider);
            ((IQueryable<$Model$>)mockSet).Expression.Returns(data.Expression);
            ((IQueryable<$Model$>)mockSet).ElementType.Returns(data.ElementType);
            ((IQueryable<$Model$>)mockSet).GetEnumerator().Returns(data.GetEnumerator());

            var db = Substitute.For<$DbContext$>();
            db.$Model$.Returns(mockSet);
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>